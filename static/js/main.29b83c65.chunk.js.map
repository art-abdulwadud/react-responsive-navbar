{"version":3,"sources":["navbar/NavList.js","navbar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["NavList","className","this","props","open","href","Component","NavBar","state","id","src","alt","width","height","onClick","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAiCeA,E,iLA7Bb,OACC,yBAAKC,UAAWC,KAAKC,MAAMC,KAAO,wBAA0B,mBAC3D,wBAAIH,UAAU,uBACb,wBAAIA,UAAU,aACb,uBAAGI,KAAK,IAAIJ,UAAU,aAAtB,SAID,wBAAIA,UAAU,aACb,uBAAGI,KAAK,IAAIJ,UAAU,aAAtB,YAID,wBAAIA,UAAU,aACb,uBAAGI,KAAK,IAAIJ,UAAU,aAAtB,UAID,wBAAIA,UAAU,aACb,uBAAGI,KAAK,IAAIJ,UAAU,aAAtB,kB,GArBgBK,aCgCPC,E,2MA7BdC,MAAQ,CACPJ,MAAM,G,wEAEG,IAAD,OACR,OACC,gCACC,yBAAKK,GAAG,cACP,yBAAKR,UAAU,yBACd,yBACCS,IAAI,6DACJC,IAAI,OACJC,MAAM,KACNC,OAAO,OALT,cASA,0BACCZ,UAAU,2BACVa,QAAS,kBAAM,EAAKC,SAAS,CAAEX,MAAO,EAAKI,MAAMJ,SAEjD,kBAAC,IAAD,OAED,kBAAC,EAAD,CAASA,KAAMF,KAAKM,MAAMJ,a,GAvBVE,aCMNU,E,iLAJb,OAAO,kBAAC,EAAD,U,GAFSV,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.29b83c65.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NavList extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className={this.props.open ? 'nav-small float-right' : 'nav float-right'}>\n\t\t\t\t<ul className=\"l-navlist mt-2 mr-2\">\n\t\t\t\t\t<li className=\"l-navitem\">\n\t\t\t\t\t\t<a href=\"/\" className=\"l-navlink\">\n\t\t\t\t\t\t\tHome\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"l-navitem\">\n\t\t\t\t\t\t<a href=\"/\" className=\"l-navlink\">\n\t\t\t\t\t\t\tSevices\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"l-navitem\">\n\t\t\t\t\t\t<a href=\"/\" className=\"l-navlink\">\n\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"l-navitem\">\n\t\t\t\t\t\t<a href=\"/\" className=\"l-navlink\">\n\t\t\t\t\t\t\tContact\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NavList;\n","import React, { Component } from 'react';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport NavList from './NavList';\n\nclass NavBar extends Component {\n\tstate = {\n\t\topen: false\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<header>\n\t\t\t\t<nav id=\"navigation\">\n\t\t\t\t\t<div className=\"brand-logo float-left\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc=\"https://media.giphy.com/media/kdQfI8PROXIB0NjbgT/giphy.gif\"\n\t\t\t\t\t\t\talt=\"logo\"\n\t\t\t\t\t\t\twidth=\"60\"\n\t\t\t\t\t\t\theight=\"50\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tBrand Name\n\t\t\t\t\t</div>\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"toggler float-right mr-2\"\n\t\t\t\t\t\tonClick={() => this.setState({ open: !this.state.open })}\n\t\t\t\t\t>\n\t\t\t\t\t\t<GiHamburgerMenu />\n\t\t\t\t\t</span>\n\t\t\t\t\t<NavList open={this.state.open} />\n\t\t\t\t</nav>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './navbar/NavBar';\n\nclass App extends Component {\n\trender() {\n\t\treturn <NavBar />;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}